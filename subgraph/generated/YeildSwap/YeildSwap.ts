// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositReserve extends ethereum.Event {
  get params(): DepositReserve__Params {
    return new DepositReserve__Params(this);
  }
}

export class DepositReserve__Params {
  _event: DepositReserve;

  constructor(event: DepositReserve) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RunOrder extends ethereum.Event {
  get params(): RunOrder__Params {
    return new RunOrder__Params(this);
  }
}

export class RunOrder__Params {
  _event: RunOrder;

  constructor(event: RunOrder) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderType(): string {
    return this._event.parameters[1].value.toString();
  }

  get ethPirce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StartYieldSwap extends ethereum.Event {
  get params(): StartYieldSwap__Params {
    return new StartYieldSwap__Params(this);
  }
}

export class StartYieldSwap__Params {
  _event: StartYieldSwap;

  constructor(event: StartYieldSwap) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get gridSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get percent(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ethPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawReserves extends ethereum.Event {
  get params(): WithdrawReserves__Params {
    return new WithdrawReserves__Params(this);
  }
}

export class WithdrawReserves__Params {
  _event: WithdrawReserves;

  constructor(event: WithdrawReserves) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawUserFunds extends ethereum.Event {
  get params(): WithdrawUserFunds__Params {
    return new WithdrawUserFunds__Params(this);
  }
}

export class WithdrawUserFunds__Params {
  _event: WithdrawUserFunds;

  constructor(event: WithdrawUserFunds) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userUsdt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class YeildSwap__usersResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class YeildSwap__getPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class YeildSwap__getUserInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class YeildSwap__getUserOrderStatusResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class YeildSwap__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class YeildSwap extends ethereum.SmartContract {
  static bind(address: Address): YeildSwap {
    return new YeildSwap("YeildSwap", address);
  }

  interval(): BigInt {
    let result = super.call("interval", "interval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interval", "interval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTimeStamp(): BigInt {
    let result = super.call("lastTimeStamp", "lastTimeStamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeStamp",
      "lastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orderPrices(param0: BigInt): BigInt {
    let result = super.call("orderPrices", "orderPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_orderPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderPrices",
      "orderPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderQue(param0: BigInt): BigInt {
    let result = super.call("orderQue", "orderQue(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_orderQue(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderQue", "orderQue(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderQuePointer(): BigInt {
    let result = super.call(
      "orderQuePointer",
      "orderQuePointer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_orderQuePointer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderQuePointer",
      "orderQuePointer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderTypes(param0: BigInt): BigInt {
    let result = super.call("orderTypes", "orderTypes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_orderTypes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderTypes", "orderTypes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  runningIndexUpdate(): boolean {
    let result = super.call(
      "runningIndexUpdate",
      "runningIndexUpdate():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_runningIndexUpdate(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "runningIndexUpdate",
      "runningIndexUpdate():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  runningOrders(): boolean {
    let result = super.call("runningOrders", "runningOrders():(bool)", []);

    return result[0].toBoolean();
  }

  try_runningOrders(): ethereum.CallResult<boolean> {
    let result = super.tryCall("runningOrders", "runningOrders():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  skippedRunns(): BigInt {
    let result = super.call("skippedRunns", "skippedRunns():(uint256)", []);

    return result[0].toBigInt();
  }

  try_skippedRunns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("skippedRunns", "skippedRunns():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakers(param0: Address): boolean {
    let result = super.call("stakers", "stakers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_stakers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("stakers", "stakers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalEthInPool(): BigInt {
    let result = super.call("totalEthInPool", "totalEthInPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalEthInPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEthInPool",
      "totalEthInPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFee(): BigInt {
    let result = super.call("totalFee", "totalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFee", "totalFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUsdtInPool(): BigInt {
    let result = super.call(
      "totalUsdtInPool",
      "totalUsdtInPool():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUsdtInPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUsdtInPool",
      "totalUsdtInPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  users(param0: Address): YeildSwap__usersResult {
    let result = super.call(
      "users",
      "users(address):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new YeildSwap__usersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<YeildSwap__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YeildSwap__usersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  getPriceUsd(): BigInt {
    let result = super.call("getPriceUsd", "getPriceUsd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPriceUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPriceUsd", "getPriceUsd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertUsdtToEth(_usdAmount: BigInt, ethPriceInUSD: BigInt): BigInt {
    let result = super.call(
      "convertUsdtToEth",
      "convertUsdtToEth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
        ethereum.Value.fromUnsignedBigInt(ethPriceInUSD)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertUsdtToEth(
    _usdAmount: BigInt,
    ethPriceInUSD: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertUsdtToEth",
      "convertUsdtToEth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
        ethereum.Value.fromUnsignedBigInt(ethPriceInUSD)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertEthToUsdt(_ethAmount: BigInt, ethPriceInUSD: BigInt): BigInt {
    let result = super.call(
      "convertEthToUsdt",
      "convertEthToUsdt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_ethAmount),
        ethereum.Value.fromUnsignedBigInt(ethPriceInUSD)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertEthToUsdt(
    _ethAmount: BigInt,
    ethPriceInUSD: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertEthToUsdt",
      "convertEthToUsdt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_ethAmount),
        ethereum.Value.fromUnsignedBigInt(ethPriceInUSD)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(): YeildSwap__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new YeildSwap__getPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getPoolInfo(): ethereum.CallResult<YeildSwap__getPoolInfoResult> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YeildSwap__getPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getUserInfo(_account: Address): YeildSwap__getUserInfoResult {
    let result = super.call(
      "getUserInfo",
      "getUserInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return new YeildSwap__getUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getUserInfo(
    _account: Address
  ): ethereum.CallResult<YeildSwap__getUserInfoResult> {
    let result = super.tryCall(
      "getUserInfo",
      "getUserInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YeildSwap__getUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getUserOrderStatus(_account: Address): YeildSwap__getUserOrderStatusResult {
    let result = super.call(
      "getUserOrderStatus",
      "getUserOrderStatus(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return new YeildSwap__getUserOrderStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserOrderStatus(
    _account: Address
  ): ethereum.CallResult<YeildSwap__getUserOrderStatusResult> {
    let result = super.tryCall(
      "getUserOrderStatus",
      "getUserOrderStatus(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YeildSwap__getUserOrderStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  ethTotalBalance(): BigInt {
    let result = super.call(
      "ethTotalBalance",
      "ethTotalBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ethTotalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ethTotalBalance",
      "ethTotalBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtBalance(_token: Address): BigInt {
    let result = super.call("usdtBalance", "usdtBalance(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_usdtBalance(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdtBalance",
      "usdtBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkUpkeep(param0: Bytes): YeildSwap__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new YeildSwap__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<YeildSwap__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YeildSwap__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class StartYieldSwapCall extends ethereum.Call {
  get inputs(): StartYieldSwapCall__Inputs {
    return new StartYieldSwapCall__Inputs(this);
  }

  get outputs(): StartYieldSwapCall__Outputs {
    return new StartYieldSwapCall__Outputs(this);
  }
}

export class StartYieldSwapCall__Inputs {
  _call: StartYieldSwapCall;

  constructor(call: StartYieldSwapCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gridCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _percentChange(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StartYieldSwapCall__Outputs {
  _call: StartYieldSwapCall;

  constructor(call: StartYieldSwapCall) {
    this._call = call;
  }
}

export class DepositReserveCall extends ethereum.Call {
  get inputs(): DepositReserveCall__Inputs {
    return new DepositReserveCall__Inputs(this);
  }

  get outputs(): DepositReserveCall__Outputs {
    return new DepositReserveCall__Outputs(this);
  }
}

export class DepositReserveCall__Inputs {
  _call: DepositReserveCall;

  constructor(call: DepositReserveCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositReserveCall__Outputs {
  _call: DepositReserveCall;

  constructor(call: DepositReserveCall) {
    this._call = call;
  }
}

export class WithdrawReserveCall extends ethereum.Call {
  get inputs(): WithdrawReserveCall__Inputs {
    return new WithdrawReserveCall__Inputs(this);
  }

  get outputs(): WithdrawReserveCall__Outputs {
    return new WithdrawReserveCall__Outputs(this);
  }
}

export class WithdrawReserveCall__Inputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawReserveCall__Outputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }
}

export class WithdrawUserFundsCall extends ethereum.Call {
  get inputs(): WithdrawUserFundsCall__Inputs {
    return new WithdrawUserFundsCall__Inputs(this);
  }

  get outputs(): WithdrawUserFundsCall__Outputs {
    return new WithdrawUserFundsCall__Outputs(this);
  }
}

export class WithdrawUserFundsCall__Inputs {
  _call: WithdrawUserFundsCall;

  constructor(call: WithdrawUserFundsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawUserFundsCall__Outputs {
  _call: WithdrawUserFundsCall;

  constructor(call: WithdrawUserFundsCall) {
    this._call = call;
  }
}

export class UpdateOrderIndexesCall extends ethereum.Call {
  get inputs(): UpdateOrderIndexesCall__Inputs {
    return new UpdateOrderIndexesCall__Inputs(this);
  }

  get outputs(): UpdateOrderIndexesCall__Outputs {
    return new UpdateOrderIndexesCall__Outputs(this);
  }
}

export class UpdateOrderIndexesCall__Inputs {
  _call: UpdateOrderIndexesCall;

  constructor(call: UpdateOrderIndexesCall) {
    this._call = call;
  }

  get currentEthPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateOrderIndexesCall__Outputs {
  _call: UpdateOrderIndexesCall;

  constructor(call: UpdateOrderIndexesCall) {
    this._call = call;
  }
}

export class RunOrderCall extends ethereum.Call {
  get inputs(): RunOrderCall__Inputs {
    return new RunOrderCall__Inputs(this);
  }

  get outputs(): RunOrderCall__Outputs {
    return new RunOrderCall__Outputs(this);
  }
}

export class RunOrderCall__Inputs {
  _call: RunOrderCall;

  constructor(call: RunOrderCall) {
    this._call = call;
  }

  get _orderIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _queIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ethPriceUsd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RunOrderCall__Outputs {
  _call: RunOrderCall;

  constructor(call: RunOrderCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RunOrdersCall extends ethereum.Call {
  get inputs(): RunOrdersCall__Inputs {
    return new RunOrdersCall__Inputs(this);
  }

  get outputs(): RunOrdersCall__Outputs {
    return new RunOrdersCall__Outputs(this);
  }
}

export class RunOrdersCall__Inputs {
  _call: RunOrdersCall;

  constructor(call: RunOrdersCall) {
    this._call = call;
  }

  get ethPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RunOrdersCall__Outputs {
  _call: RunOrdersCall;

  constructor(call: RunOrdersCall) {
    this._call = call;
  }
}
