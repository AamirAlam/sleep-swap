// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolData", id.toString(), this);
  }

  static load(id: string): PoolData | null {
    return store.get("PoolData", id) as PoolData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalEth(): BigInt | null {
    let value = this.get("totalEth");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalEth(value: BigInt | null) {
    if (value === null) {
      this.unset("totalEth");
    } else {
      this.set("totalEth", Value.fromBigInt(value as BigInt));
    }
  }

  get totalToken(): BigInt | null {
    let value = this.get("totalToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalToken(value: BigInt | null) {
    if (value === null) {
      this.unset("totalToken");
    } else {
      this.set("totalToken", Value.fromBigInt(value as BigInt));
    }
  }

  get totalOrders(): BigInt | null {
    let value = this.get("totalOrders");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalOrders(value: BigInt | null) {
    if (value === null) {
      this.unset("totalOrders");
    } else {
      this.set("totalOrders", Value.fromBigInt(value as BigInt));
    }
  }

  get ordersCompleted(): BigInt | null {
    let value = this.get("ordersCompleted");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ordersCompleted(value: BigInt | null) {
    if (value === null) {
      this.unset("ordersCompleted");
    } else {
      this.set("ordersCompleted", Value.fromBigInt(value as BigInt));
    }
  }

  get ordersActive(): BigInt | null {
    let value = this.get("ordersActive");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ordersActive(value: BigInt | null) {
    if (value === null) {
      this.unset("ordersActive");
    } else {
      this.set("ordersActive", Value.fromBigInt(value as BigInt));
    }
  }

  get averageGain(): BigInt | null {
    let value = this.get("averageGain");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageGain(value: BigInt | null) {
    if (value === null) {
      this.unset("averageGain");
    } else {
      this.set("averageGain", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UserActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserActivity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserActivity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserActivity", id.toString(), this);
  }

  static load(id: string): UserActivity | null {
    return store.get("UserActivity", id) as UserActivity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get atPrice(): BigInt {
    let value = this.get("atPrice");
    return value.toBigInt();
  }

  set atPrice(value: BigInt) {
    this.set("atPrice", Value.fromBigInt(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get tokenAmount(): BigInt | null {
    let value = this.get("tokenAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenAmount");
    } else {
      this.set("tokenAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get ethAmount(): BigInt | null {
    let value = this.get("ethAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("ethAmount");
    } else {
      this.set("ethAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
